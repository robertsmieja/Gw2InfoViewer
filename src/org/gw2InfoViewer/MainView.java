/*
 *  Gw2InfoViewer - Java Swing based application that reads the Guild Wars 2 JSON API
 *  Copyright (C) 2013 Robert Smieja
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.gw2InfoViewer;

import java.awt.EventQueue;
import javax.swing.DefaultListModel;
import org.gw2InfoViewer.models.Event;
import org.gw2InfoViewer.models.EventList;

/**
 * Singleton to represent main window
 *
 * @author Robert Smieja
 */
public class MainView extends javax.swing.JFrame {

    private EventList eventList;

    /**
     * Creates new form MainView
     */
    public MainView() {
        initComponents();

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                setVisible(true);
            }
        });

        this.eventList = null;
    }

    public void setEventsListModel(EventList eventList) {
        this.eventList = eventList;

        DefaultListModel<Event> listModel = new DefaultListModel<Event>();
        for (Event event : eventList.getEventList()) {
//         listModel.addElement(event.toString());
            listModel.addElement(event);
        }

        this.eventNameList.setModel(listModel);
        this.eventNameList.setSelectedIndex(0);
        this.eventSplitPane.resetToPreferredSizes();
    }

    public EventList getEventsListModel() {
        return eventList;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainTabPane = new javax.swing.JTabbedPane();
        eventSplitPane = new javax.swing.JSplitPane();
        eventDetailsPanel = new javax.swing.JPanel();
        eventIdLabel = new javax.swing.JLabel();
        eventIdText = new javax.swing.JTextField();
        mapIdLabel = new javax.swing.JLabel();
        mapIdText = new javax.swing.JTextField();
        worldIdText = new javax.swing.JTextField();
        worldIdLabel = new javax.swing.JLabel();
        stateLabel = new javax.swing.JLabel();
        stateText = new javax.swing.JTextField();
        eventNameListScrollPane = new javax.swing.JScrollPane();
        eventNameList = new javax.swing.JList();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        editMenu = new javax.swing.JMenu();
        refreshMenu = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Guild Wars 2 - Info Viewer");
        setIconImages(null);

        eventSplitPane.setContinuousLayout(true);

        eventDetailsPanel.setPreferredSize(new java.awt.Dimension(600, 600));

        eventIdLabel.setText("Event ID:");

        eventIdText.setEditable(false);
        eventIdText.setText("Loading Event ID...");
        eventIdText.setMinimumSize(new java.awt.Dimension(250, 20));
        eventIdText.setPreferredSize(new java.awt.Dimension(150, 20));
        eventIdText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eventIdTextActionPerformed(evt);
            }
        });

        mapIdLabel.setText("Map ID:");

        mapIdText.setEditable(false);
        mapIdText.setText("Loading Map ID...");
        mapIdText.setMinimumSize(new java.awt.Dimension(250, 20));
        mapIdText.setPreferredSize(new java.awt.Dimension(250, 20));
        mapIdText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mapIdTextActionPerformed(evt);
            }
        });

        worldIdText.setEditable(false);
        worldIdText.setText("Loading World ID...");
        worldIdText.setMinimumSize(new java.awt.Dimension(250, 20));
        worldIdText.setPreferredSize(new java.awt.Dimension(150, 20));
        worldIdText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                worldIdTextActionPerformed(evt);
            }
        });

        worldIdLabel.setText("World ID:");

        stateLabel.setText("State:");

        stateText.setEditable(false);
        stateText.setText("Loading State...");
        stateText.setMinimumSize(new java.awt.Dimension(250, 20));
        stateText.setPreferredSize(new java.awt.Dimension(250, 20));
        stateText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stateTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout eventDetailsPanelLayout = new javax.swing.GroupLayout(eventDetailsPanel);
        eventDetailsPanel.setLayout(eventDetailsPanelLayout);
        eventDetailsPanelLayout.setHorizontalGroup(
            eventDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eventDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(eventDetailsPanelLayout.createSequentialGroup()
                        .addComponent(stateLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(stateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, eventDetailsPanelLayout.createSequentialGroup()
                        .addComponent(worldIdLabel)
                        .addGap(18, 18, 18)
                        .addComponent(worldIdText, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, eventDetailsPanelLayout.createSequentialGroup()
                        .addComponent(mapIdLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(mapIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, eventDetailsPanelLayout.createSequentialGroup()
                        .addComponent(eventIdLabel)
                        .addGap(18, 18, 18)
                        .addComponent(eventIdText, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)))
                .addGap(364, 364, 364))
        );
        eventDetailsPanelLayout.setVerticalGroup(
            eventDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(eventDetailsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(eventDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eventIdLabel)
                    .addComponent(eventIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(eventDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mapIdLabel)
                    .addComponent(mapIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(eventDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(worldIdLabel)
                    .addComponent(worldIdText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(eventDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stateLabel)
                    .addComponent(stateText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(461, Short.MAX_VALUE))
        );

        stateText.getAccessibleContext().setAccessibleDescription("");

        eventSplitPane.setRightComponent(eventDetailsPanel);

        eventNameListScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        eventNameListScrollPane.setMinimumSize(new java.awt.Dimension(250, 200));
        eventNameListScrollPane.setPreferredSize(new java.awt.Dimension(200, 200));

        eventNameList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Loading..." };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        eventNameList.setMinimumSize(new java.awt.Dimension(200, 16));
        eventNameList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                eventNameListValueChanged(evt);
            }
        });
        eventNameListScrollPane.setViewportView(eventNameList);

        eventSplitPane.setLeftComponent(eventNameListScrollPane);

        mainTabPane.addTab("Events", eventSplitPane);

        fileMenu.setText("File");
        mainMenuBar.add(fileMenu);

        editMenu.setText("Edit");
        mainMenuBar.add(editMenu);

        refreshMenu.setText("Refresh");
        refreshMenu.setToolTipText("");
        refreshMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshMenuMouseClicked(evt);
            }
        });
        mainMenuBar.add(refreshMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 950, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(mainTabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 950, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(mainTabPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void refreshMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshMenuMouseClicked
        setEventsListModel(eventList);
        refreshMenu.setSelected(false);
    }//GEN-LAST:event_refreshMenuMouseClicked

    private void eventIdTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eventIdTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_eventIdTextActionPerformed

    private void eventNameListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_eventNameListValueChanged
        Event event = ((Event)eventNameList.getSelectedValue());
        
        eventIdText.setText(event.getEventId());
        worldIdText.setText(event.getWorldId().toString());
        mapIdText.setText(event.getMapId().toString());
        stateText.setText(event.getState().toString());
    }//GEN-LAST:event_eventNameListValueChanged

    private void mapIdTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mapIdTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mapIdTextActionPerformed

    private void worldIdTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_worldIdTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_worldIdTextActionPerformed

    private void stateTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stateTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_stateTextActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu editMenu;
    private javax.swing.JPanel eventDetailsPanel;
    private javax.swing.JLabel eventIdLabel;
    private javax.swing.JTextField eventIdText;
    private javax.swing.JList eventNameList;
    private javax.swing.JScrollPane eventNameListScrollPane;
    private javax.swing.JSplitPane eventSplitPane;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JTabbedPane mainTabPane;
    private javax.swing.JLabel mapIdLabel;
    private javax.swing.JTextField mapIdText;
    private javax.swing.JMenu refreshMenu;
    private javax.swing.JLabel stateLabel;
    private javax.swing.JTextField stateText;
    private javax.swing.JLabel worldIdLabel;
    private javax.swing.JTextField worldIdText;
    // End of variables declaration//GEN-END:variables
}
